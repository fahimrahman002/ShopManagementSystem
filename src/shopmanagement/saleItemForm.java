/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package shopmanagement;

import com.sun.glass.events.KeyEvent;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.image.BufferedImage;
import java.awt.print.PageFormat;
import java.awt.print.Printable;
import java.awt.print.PrinterException;
import java.awt.print.PrinterJob;
import java.io.File;
import java.io.IOException;
import javax.imageio.ImageIO;

/**
 *
 * @author Fahim
 */
public class saleItemForm extends javax.swing.JFrame {

    Connection conn = null;
    PreparedStatement pst = null;
    ResultSet rs = null;
    DefaultTableModel dtm1, dtm2;
    String user;
    boolean maximizeState = false;
    int row;

    /** Creates new form saleItemForm */
    public saleItemForm() {
        initComponents();
        buttonAnimation();
        conn = JConnection.connectdb();
        this.user = "admin";
        setAllValues();
        setTableModel();
        showProducts();

    }

    public saleItemForm(String user) {
        initComponents();
        buttonAnimation();
        conn = JConnection.connectdb();
        this.user = user;
        setAllValues();
        setTableModel();
        showProducts();

    }

    public void setAllValues() {
        int bill_no = 1;
        subTotal = 0;
        subTotalLabel.setText("0");
        Date datetime = new Date();
        DateFormat dateFormat = new SimpleDateFormat("dd.MM.yyyy   hh:mm");
        dateLabel.setText(dateFormat.format(datetime));
        String sql = "select org,location,phone from users where user=\'" + user + "\'";
        try {
            pst = conn.prepareStatement(sql);
            rs = pst.executeQuery();
            if (rs.next()) {
                companyLabel.setText(rs.getString(1));
                addressLabel.setText(rs.getString(2));
                phoneLabel.setText(rs.getString(3));
            }
        } catch (SQLException ex) {
            System.out.println(ex);
        }

        try {
            String sql1 = "select max(bill_no) from sales where user='" + user + "\'";
            pst = conn.prepareStatement(sql1);
            rs = pst.executeQuery();
            if (rs.next()) {
                bill_no = rs.getInt(1);
            }
            billNoLabel.setText(Integer.toString(bill_no+1));
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Server down. Can't generate bill no.", "Warning", JOptionPane.WARNING_MESSAGE);

        }

    }

    public void setTableModel() {
        dtm1 = (DefaultTableModel) productTable.getModel();
        dtm2 = (DefaultTableModel) memoTable.getModel();
        dtm2.setRowCount(0);
        productTable.setShowHorizontalLines(true);
        productTable.setShowVerticalLines(true);
        memoTable.setShowGrid(true);
    }

    public void buttonAnimation() {
        memoRefreshButton.setVisible(true);
        memoRefreshButton1.setVisible(false);
        refreshButton.setVisible(true);
        refreshButton1.setVisible(false);
        addItemButton.setVisible(true);
        addItemButton1.setVisible(false);
        removeButton.setVisible(true);
        removeButton1.setVisible(false);
        updateButton.setVisible(true);
        updateButton1.setVisible(false);
    }

    public void showProducts() {

        String sql = "select * from products where user=" + "\'" + user + "\'";

        try {

            pst = conn.prepareStatement(sql);
            rs = pst.executeQuery();

            dtm1.setRowCount(0);
            while (rs.next()) {
                Object[] obj = {rs.getString(2), rs.getString(3), rs.getString(4), rs.getDouble(6), rs.getInt(7), rs.getInt(8), rs.getDate(9), rs.getTime(10)};
                dtm1.addRow(obj);
            }

        } catch (Exception e) {
            final JPanel panel = new JPanel();
            JOptionPane.showMessageDialog(panel, "Can not fetch data from database.");
        }
    }

    public void clearFields() {
        productIdField.setText("");
        productNameField.setText("");
        voucharCode.setText("");
        quantityField.setText("1");
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        productNameField = new javax.swing.JTextField();
        voucharCode = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        quantityField = new javax.swing.JTextField();
        quantityLabel = new javax.swing.JLabel();
        addItemButton = new javax.swing.JLabel();
        productIdField = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        addItemButton1 = new javax.swing.JLabel();
        refreshButton = new javax.swing.JLabel();
        refreshButton1 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        productTable = new javax.swing.JTable();
        downArrowKey = new javax.swing.JLabel();
        upArrowKey = new javax.swing.JLabel();
        memoPanel = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        subTotalLabel = new javax.swing.JLabel();
        billNoLabel = new javax.swing.JLabel();
        dateLabel = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        memoTable = new javax.swing.JTable();
        companyLabel = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        phoneLabel = new javax.swing.JLabel();
        addressLabel = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        jLabel23 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        updateButton = new javax.swing.JLabel();
        updateButton1 = new javax.swing.JLabel();
        removeButton = new javax.swing.JLabel();
        removeButton1 = new javax.swing.JLabel();
        printButton = new javax.swing.JButton();
        memoRefreshButton = new javax.swing.JLabel();
        memoRefreshButton1 = new javax.swing.JLabel();
        saleItemButton = new javax.swing.JButton();
        jPanel6 = new javax.swing.JPanel();
        maximizeButton = new javax.swing.JButton();
        closeButton = new javax.swing.JButton();
        minimizeButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(102, 0, 0));
        setUndecorated(true);
        setPreferredSize(new java.awt.Dimension(1300, 660));

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 1, 0, 1, new java.awt.Color(0, 0, 0)));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel1.setText("Product Name :");
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 80, 116, 30));

        productNameField.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        productNameField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                productNameFieldKeyReleased(evt);
            }
        });
        jPanel1.add(productNameField, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 80, 270, -1));

        voucharCode.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        voucharCode.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                voucharCodeMouseClicked(evt);
            }
        });
        voucharCode.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                voucharCodeKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                voucharCodeKeyTyped(evt);
            }
        });
        jPanel1.add(voucharCode, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 150, 90, -1));

        jLabel6.setFont(new java.awt.Font("Arial", 1, 16)); // NOI18N
        jLabel6.setText("Voucher  code :");
        jPanel1.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 150, 130, -1));

        quantityField.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        quantityField.setText("1");
        jPanel1.add(quantityField, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 120, 60, -1));

        quantityLabel.setFont(new java.awt.Font("Arial", 1, 17)); // NOI18N
        quantityLabel.setText(" item");
        jPanel1.add(quantityLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 120, 50, 30));

        addItemButton.setBackground(new java.awt.Color(255, 51, 51));
        addItemButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/addItem.jpg"))); // NOI18N
        addItemButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                addItemButtonMouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                addItemButtonMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                addItemButtonMouseReleased(evt);
            }
        });
        jPanel1.add(addItemButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 140, 110, 40));

        productIdField.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        productIdField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                productIdFieldKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                productIdFieldKeyReleased(evt);
            }
        });
        jPanel1.add(productIdField, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 50, 270, -1));

        jLabel10.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel10.setText("Product Id :");
        jPanel1.add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 50, 110, 30));

        addItemButton1.setBackground(new java.awt.Color(255, 51, 51));
        addItemButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/addItem.jpg"))); // NOI18N
        addItemButton1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                addItemButton1MouseClicked(evt);
            }
        });
        jPanel1.add(addItemButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 150, 102, 30));

        refreshButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/refresh - Copy.jpg"))); // NOI18N
        refreshButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                refreshButtonMouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                refreshButtonMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                refreshButtonMouseReleased(evt);
            }
        });
        jPanel1.add(refreshButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 130, 140, 60));

        refreshButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/refresh3 - Copy.png"))); // NOI18N
        jPanel1.add(refreshButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 150, 110, 40));

        jLabel7.setFont(new java.awt.Font("Arial", 1, 16)); // NOI18N
        jLabel7.setText("Quantity :");
        jPanel1.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 120, 86, -1));

        jLabel3.setFont(new java.awt.Font("DialogInput", 1, 24)); // NOI18N
        jLabel3.setText("Welcome to our shop");
        jPanel1.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 0, 290, 29));

        productTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Product Id", "Name", "Type", "Price", "Vat", "Stock", "Update", "Time"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Double.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        productTable.setRowHeight(20);
        productTable.getTableHeader().setReorderingAllowed(false);
        productTable.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                productTableFocusGained(evt);
            }
        });
        productTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                productTableMouseClicked(evt);
            }
        });
        productTable.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                productTablePropertyChange(evt);
            }
        });
        jScrollPane1.setViewportView(productTable);
        if (productTable.getColumnModel().getColumnCount() > 0) {
            productTable.getColumnModel().getColumn(0).setResizable(false);
            productTable.getColumnModel().getColumn(1).setResizable(false);
            productTable.getColumnModel().getColumn(2).setResizable(false);
            productTable.getColumnModel().getColumn(3).setResizable(false);
            productTable.getColumnModel().getColumn(4).setResizable(false);
            productTable.getColumnModel().getColumn(4).setPreferredWidth(40);
            productTable.getColumnModel().getColumn(5).setResizable(false);
            productTable.getColumnModel().getColumn(5).setPreferredWidth(50);
            productTable.getColumnModel().getColumn(6).setResizable(false);
            productTable.getColumnModel().getColumn(7).setResizable(false);
            productTable.getColumnModel().getColumn(7).setPreferredWidth(60);
        }

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 190, 560, 390));

        downArrowKey.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/down_arrow.png"))); // NOI18N
        downArrowKey.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                downArrowKeyMousePressed(evt);
            }
        });
        jPanel1.add(downArrowKey, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 130, 20, 18));

        upArrowKey.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/up_arrow.png"))); // NOI18N
        upArrowKey.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                upArrowKeyMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                upArrowKeyMouseReleased(evt);
            }
        });
        jPanel1.add(upArrowKey, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 110, 20, 18));

        memoPanel.setBackground(new java.awt.Color(204, 255, 153));
        memoPanel.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 1, 0, 1, new java.awt.Color(0, 0, 0)));
        memoPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel2.setFont(new java.awt.Font("DialogInput", 1, 24)); // NOI18N
        jLabel2.setText("BILL/CASH MEMO");
        memoPanel.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 10, 210, 29));

        jLabel11.setFont(new java.awt.Font("Arial", 1, 17)); // NOI18N
        jLabel11.setText(" Date  :");
        memoPanel.add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 90, 60, 30));

        subTotalLabel.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        subTotalLabel.setText("0");
        memoPanel.add(subTotalLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(610, 530, 70, 30));

        billNoLabel.setFont(new java.awt.Font("Arial", 1, 17)); // NOI18N
        billNoLabel.setText("1123");
        memoPanel.add(billNoLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 60, 90, 30));

        dateLabel.setFont(new java.awt.Font("Arial", 1, 17)); // NOI18N
        dateLabel.setText("24/4/2020   23:30");
        memoPanel.add(dateLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 90, 170, 30));

        jScrollPane2.setBackground(new java.awt.Color(204, 255, 204));
        jScrollPane2.setBorder(null);
        jScrollPane2.setForeground(new java.awt.Color(102, 102, 102));

        memoTable.setBackground(new java.awt.Color(255, 255, 255));
        memoTable.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        memoTable.setForeground(new java.awt.Color(0, 0, 0));
        memoTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "No.", "Item#", "Description", "Type", "Unit Price", "Vat (%)", "Quantity", "Discount", "Total amount"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Double.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Double.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        memoTable.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        memoTable.setGridColor(new java.awt.Color(51, 51, 51));
        memoTable.setRowHeight(18);
        memoTable.setRowMargin(2);
        memoTable.getTableHeader().setReorderingAllowed(false);
        memoTable.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                memoTableFocusGained(evt);
            }
        });
        memoTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                memoTableMouseClicked(evt);
            }
        });
        memoTable.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                memoTablePropertyChange(evt);
            }
        });
        jScrollPane2.setViewportView(memoTable);
        if (memoTable.getColumnModel().getColumnCount() > 0) {
            memoTable.getColumnModel().getColumn(0).setResizable(false);
            memoTable.getColumnModel().getColumn(0).setPreferredWidth(25);
            memoTable.getColumnModel().getColumn(1).setResizable(false);
            memoTable.getColumnModel().getColumn(2).setResizable(false);
            memoTable.getColumnModel().getColumn(3).setResizable(false);
            memoTable.getColumnModel().getColumn(4).setResizable(false);
            memoTable.getColumnModel().getColumn(5).setResizable(false);
            memoTable.getColumnModel().getColumn(5).setPreferredWidth(40);
            memoTable.getColumnModel().getColumn(6).setResizable(false);
            memoTable.getColumnModel().getColumn(6).setPreferredWidth(45);
            memoTable.getColumnModel().getColumn(7).setResizable(false);
            memoTable.getColumnModel().getColumn(7).setPreferredWidth(40);
            memoTable.getColumnModel().getColumn(8).setResizable(false);
        }

        memoPanel.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 140, 690, 390));

        companyLabel.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        companyLabel.setText("My Shop");
        memoPanel.add(companyLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 60, 130, 30));

        jLabel16.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel16.setText("Thank You. Have a good day  ");
        memoPanel.add(jLabel16, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 530, 210, 30));

        jLabel4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/fun.png"))); // NOI18N
        memoPanel.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 530, 40, 40));

        jLabel17.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel17.setText("Sub Total :");
        memoPanel.add(jLabel17, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 530, 100, 30));

        jLabel18.setFont(new java.awt.Font("Arial", 1, 15)); // NOI18N
        jLabel18.setText("Bill No. :");
        memoPanel.add(jLabel18, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 60, 60, 30));

        jLabel19.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel19.setText("Company :");
        memoPanel.add(jLabel19, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 60, 90, 30));

        phoneLabel.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        phoneLabel.setText("01723432443");
        memoPanel.add(phoneLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 100, 130, 30));

        addressLabel.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        addressLabel.setText("2/4 Mirpur, Dhaka");
        memoPanel.add(addressLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 80, 180, 30));

        jLabel22.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel22.setText("Address :");
        memoPanel.add(jLabel22, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 80, 90, 30));

        jLabel23.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel23.setText("Phone :");
        memoPanel.add(jLabel23, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 100, 90, 30));

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 1, 0, 1, new java.awt.Color(0, 0, 0)));
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        updateButton.setBackground(new java.awt.Color(255, 51, 51));
        updateButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/update.jpg"))); // NOI18N
        updateButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                updateButtonMouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                updateButtonMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                updateButtonMouseReleased(evt);
            }
        });
        jPanel2.add(updateButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 10, 102, 32));

        updateButton1.setBackground(new java.awt.Color(255, 51, 51));
        updateButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/update.jpg"))); // NOI18N
        updateButton1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                updateButton1MouseClicked(evt);
            }
        });
        jPanel2.add(updateButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(178, 12, 102, 32));

        removeButton.setBackground(new java.awt.Color(255, 51, 51));
        removeButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/remove.jpg"))); // NOI18N
        removeButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                removeButtonMouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                removeButtonMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                removeButtonMouseReleased(evt);
            }
        });
        jPanel2.add(removeButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 5, 110, 40));

        removeButton1.setBackground(new java.awt.Color(255, 51, 51));
        removeButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/remove.jpg"))); // NOI18N
        removeButton1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                removeButton1MouseClicked(evt);
            }
        });
        jPanel2.add(removeButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(308, 7, 110, 40));

        printButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/printer.png"))); // NOI18N
        printButton.setBorder(null);
        printButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                printButtonActionPerformed(evt);
            }
        });
        jPanel2.add(printButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 0, 50, 50));

        memoRefreshButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/refresh2.png"))); // NOI18N
        memoRefreshButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                memoRefreshButtonMouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                memoRefreshButtonMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                memoRefreshButtonMouseReleased(evt);
            }
        });
        jPanel2.add(memoRefreshButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 10, 30, 30));

        memoRefreshButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/refresh.png"))); // NOI18N
        memoRefreshButton1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                memoRefreshButton1MouseClicked(evt);
            }
        });
        jPanel2.add(memoRefreshButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 10, 30, 30));

        saleItemButton.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        saleItemButton.setText("Sale without bill");
        saleItemButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saleItemButtonActionPerformed(evt);
            }
        });
        jPanel2.add(saleItemButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 10, 120, 30));

        jPanel6.setBackground(new java.awt.Color(0, 0, 0,30
        ));

        maximizeButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/window.png"))); // NOI18N
        maximizeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                maximizeButtonActionPerformed(evt);
            }
        });

        closeButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/close.png"))); // NOI18N
        closeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeButtonActionPerformed(evt);
            }
        });

        minimizeButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/minimize.png"))); // NOI18N
        minimizeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                minimizeButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(minimizeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(maximizeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(closeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(closeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(maximizeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(minimizeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap(7, Short.MAX_VALUE))
        );

        jPanel2.add(jPanel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(630, 0, 70, -1));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 585, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(memoPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 703, Short.MAX_VALUE))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(memoPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 610, Short.MAX_VALUE))
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents
double subTotal = 0;
    private void addItemButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_addItemButtonMouseClicked
        String productid = productIdField.getText();
        String productName = productNameField.getText();
        int quantity = Integer.parseInt(quantityField.getText());
        int stock = (int) dtm1.getValueAt(row, 5);
        if (quantity > stock) {
            JOptionPane.showMessageDialog(null, "Stock is not enough.", "Warning", JOptionPane.WARNING_MESSAGE);
        } else {

            int discount = 0;
            double total = 0;
            double price = 0;
            int vat = 0;
            int itemNo = 0;
            String sql = "select * from products where user=" + "\'" + user + "\' and product_id="
                    + "\'" + productid + "\'";

            try {
                pst = conn.prepareStatement(sql);
                rs = pst.executeQuery();
                itemNo = dtm2.getRowCount() + 1;

                if (rs.next()) {
                    price = rs.getDouble(6);
                    vat = rs.getInt(7);
                    total = (price + (double) vat / 100 * (double) price) * (double) quantity;
                    subTotal = subTotal + total;
                    Object[] obj = {itemNo, rs.getString(2), rs.getString(3), rs.getString(4), rs.getDouble(6), rs.getInt(7), quantity, discount, total};
                    dtm2.addRow(obj);
                    subTotalLabel.setText(Double.toString(subTotal));
                }

                String sql2 = "update products set stock=" + (stock - quantity) + " where user='" + user + "\' and product_id=\'" + productid + "\'";
                try {
                    pst = conn.prepareStatement(sql2);
                    pst.execute();
                } catch (Exception e) {
                    System.out.println(e);
                }

                clearFields();
                showProducts();

//            productTable.setModel(DbUtils.resultSetToTableModel(rs));
            } catch (Exception e) {
                final JPanel panel = new JPanel();
                JOptionPane.showMessageDialog(panel, "Can not fetch data from database.");

            }
        }
    }//GEN-LAST:event_addItemButtonMouseClicked

    private void addItemButtonMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_addItemButtonMousePressed
        addItemButton.setVisible(false);
        addItemButton1.setVisible(true);
    }//GEN-LAST:event_addItemButtonMousePressed

    private void addItemButtonMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_addItemButtonMouseReleased
        addItemButton.setVisible(true);
        addItemButton1.setVisible(false);
    }//GEN-LAST:event_addItemButtonMouseReleased

    private void removeButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_removeButtonMouseClicked

        String id, sql1, sql2;
        int stock = 0, quantity = 0;
        double removeItemsPrice = 0;
        if (memoTable.getRowCount() == 0) {
            final JPanel panel = new JPanel();
            JOptionPane.showMessageDialog(panel, "There is no data to delete.", "Warning",
                    JOptionPane.WARNING_MESSAGE);
        } else {
            int[] rows = memoTable.getSelectedRows();
            if (rows.length == 0) {
                final JPanel panel = new JPanel();
                JOptionPane.showMessageDialog(panel, "No row selected.", "No selection",
                        JOptionPane.INFORMATION_MESSAGE);
            } else {
                String warningMassage = "Are you sure ?\nDelete products from list!!";
                int DialogResult = JOptionPane.showConfirmDialog(this, warningMassage, "Delete", JOptionPane.YES_NO_OPTION);
                if (DialogResult == 0) {
                    try {
                        for (int i = rows.length - 1; i >= 0; i--) {
                            removeItemsPrice += (double) dtm2.getValueAt(rows[i], 8);
                            restoreStock(dtm2, rows[i]);
                            dtm2.removeRow(rows[i]);
                        }
                        setSerialNum(rows[0]);
                        subTotal = Double.parseDouble(subTotalLabel.getText()) - removeItemsPrice;
                        subTotalLabel.setText(Double.toString(subTotal));
                        showProducts();
                    } catch (Exception ex) {
                        final JPanel panel = new JPanel();
                        JOptionPane.showMessageDialog(panel, "Can not delete from the list. ", "Warning",
                                JOptionPane.WARNING_MESSAGE);
                    }
                }
            }
        }
    }//GEN-LAST:event_removeButtonMouseClicked
    public void setSerialNum(int lastDeletedRow) {
        int row = memoTable.getRowCount();
        for (int j = lastDeletedRow; j < row; j++) {
            dtm2.setValueAt(j + 1, j, 0);
        }
    }
    private void removeButtonMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_removeButtonMousePressed
        removeButton.setVisible(false);
        removeButton1.setVisible(true);
    }//GEN-LAST:event_removeButtonMousePressed

    private void removeButtonMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_removeButtonMouseReleased
        removeButton.setVisible(true);
        removeButton1.setVisible(false);
    }//GEN-LAST:event_removeButtonMouseReleased

    private void addItemButton1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_addItemButton1MouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_addItemButton1MouseClicked

    private void removeButton1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_removeButton1MouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_removeButton1MouseClicked

    private void updateButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_updateButtonMouseClicked
        int stock = 0;
        String productId, sql1, sql2;
        if (memoTable.getRowCount() == 0) {
            final JPanel panel = new JPanel();
            JOptionPane.showMessageDialog(panel, "There is no data to update.", "Warning",
                    JOptionPane.WARNING_MESSAGE);
        } else {
            int row = memoTable.getSelectedRow();
            if (row == -1) {
                final JPanel panel = new JPanel();
                JOptionPane.showMessageDialog(panel, "No row selected.", "No selection",
                        JOptionPane.INFORMATION_MESSAGE);
            } else {
                productIdField.setText((String) dtm2.getValueAt(row, 1));
                productNameField.setText((String) dtm2.getValueAt(row, 2));
                int quantity = (int) dtm2.getValueAt(row, 6);
                double removeItemTotalPrice = (double) dtm2.getValueAt(row, 8);
                quantityField.setText(Integer.toString(quantity));

                restoreStock(dtm2, row);

                dtm2.removeRow(row);
                subTotal = subTotal - removeItemTotalPrice;
                subTotalLabel.setText(Double.toString(subTotal));
            }
            showProducts();
        }
    }//GEN-LAST:event_updateButtonMouseClicked

    private void updateButtonMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_updateButtonMousePressed
        updateButton.setVisible(false);
        updateButton1.setVisible(true);
    }//GEN-LAST:event_updateButtonMousePressed

    private void updateButtonMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_updateButtonMouseReleased
        updateButton.setVisible(true);
        updateButton1.setVisible(false);
    }//GEN-LAST:event_updateButtonMouseReleased

    private void updateButton1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_updateButton1MouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_updateButton1MouseClicked

    private void refreshButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_refreshButtonMouseClicked
        productIdField.setText("");
        productNameField.setText("");
            showProducts();
       
    }//GEN-LAST:event_refreshButtonMouseClicked

    private void refreshButtonMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_refreshButtonMousePressed
        refreshButton.setVisible(false);
        refreshButton1.setVisible(true);
    }//GEN-LAST:event_refreshButtonMousePressed

    private void refreshButtonMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_refreshButtonMouseReleased
        refreshButton.setVisible(true);
        refreshButton1.setVisible(false);
    }//GEN-LAST:event_refreshButtonMouseReleased

    private void productTableFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_productTableFocusGained

    }//GEN-LAST:event_productTableFocusGained

    private void productTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_productTableMouseClicked
        row = productTable.getSelectedRow();
        productIdField.setText((String) dtm1.getValueAt(row, 0));
        productNameField.setText((String) dtm1.getValueAt(row, 1));
        String type = (String) dtm1.getValueAt(row, 2);
        if (type.equals("Liquid")) {
            quantityLabel.setText("Liter");

        } else if (type.equals("Grocery") || type.equals("Meat") || type.equals("Fish")) {
            quantityLabel.setText("KG");

        } else {
            quantityLabel.setText("Item");

        }
    }//GEN-LAST:event_productTableMouseClicked

    private void productTablePropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_productTablePropertyChange

    }//GEN-LAST:event_productTablePropertyChange

    private void voucharCodeKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_voucharCodeKeyTyped

    }//GEN-LAST:event_voucharCodeKeyTyped

    private void voucharCodeKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_voucharCodeKeyPressed

    }//GEN-LAST:event_voucharCodeKeyPressed

    private void voucharCodeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_voucharCodeMouseClicked

    }//GEN-LAST:event_voucharCodeMouseClicked

    private void memoTableFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_memoTableFocusGained
        // TODO add your handling code here:
    }//GEN-LAST:event_memoTableFocusGained

    private void memoTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_memoTableMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_memoTableMouseClicked

    private void memoTablePropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_memoTablePropertyChange
        // TODO add your handling code here:
    }//GEN-LAST:event_memoTablePropertyChange

    private void productIdFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_productIdFieldKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            String searchItem = "";
            searchItem = productIdField.getText();
            String id;

            if (!searchItem.equals("")) {
                for (int i = 0; i < dtm1.getRowCount(); i++) {
                    id = (String) productTable.getValueAt(i, 0);
                    if (!id.equals(searchItem)) {
                        dtm1.removeRow(i);
                    }
                }
                if (dtm1.getRowCount() == 0) {
                    JOptionPane.showMessageDialog(null, "Result not found");
                    productIdField.setText("");
                    showProducts();
                }
            }
        }
    }//GEN-LAST:event_productIdFieldKeyPressed
    int[] i = new int[5];
    int index = 0;
    String searchItem = "";
    private void productIdFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_productIdFieldKeyReleased
        searchItem = productIdField.getText();
        String id;

        if (!searchItem.equals("")) {
            int x = index++;
            if (x == 4) {
                index = 0;
            }
            i[x] = searchItem.length();
            if (x != 0) {
                if (i[x] < i[x - 1]) {
                    showProducts();
                    searchItem = productIdField.getText();
                    for (int i = 0; i < dtm1.getRowCount(); i++) {
                        id = (String) productTable.getValueAt(i, 0);
                        if (!id.contains(searchItem)) {
                            dtm1.removeRow(i);
                        }
                    }
                } else {
                    for (int i = 0; i < dtm1.getRowCount(); i++) {
                        id = (String) productTable.getValueAt(i, 0);
                        if (!id.contains(searchItem)) {
                            dtm1.removeRow(i);
                        }
                    }
                }
            }
        } else {
            showProducts();
        }
    }//GEN-LAST:event_productIdFieldKeyReleased
    int[] i2 = new int[5];
    int index2 = 0;
    String searchItemName = "";
    private void productNameFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_productNameFieldKeyReleased
        searchItemName = productNameField.getText();
        String name;

        if (!searchItemName.equals("")) {
            int x = index2++;
            if (x == 4) {
                index2 = 0;
            }
            i2[x] = searchItemName.length();
            if (x != 0) {
                if (i2[x] < i2[x - 1]) {
                    showProducts();
                    searchItemName = productNameField.getText();
                    for (int i = 0; i < dtm1.getRowCount(); i++) {
                        name = (String) productTable.getValueAt(i, 1);
                        if (!name.contains(searchItemName)) {
                            dtm1.removeRow(i);
                        }
                    }
                } else {
                    for (int i = 0; i < dtm1.getRowCount(); i++) {
                        name = (String) productTable.getValueAt(i, 1);
                        if (!name.contains(searchItemName)) {
                            dtm1.removeRow(i);
                        }
                    }
                }
            }
        } else {
            showProducts();
        }
    }//GEN-LAST:event_productNameFieldKeyReleased

    private void upArrowKeyMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_upArrowKeyMouseReleased

    }//GEN-LAST:event_upArrowKeyMouseReleased

    private void downArrowKeyMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_downArrowKeyMousePressed
        int quantity = Integer.parseInt(quantityField.getText());
        quantity--;
        if (quantity < 0) {
            quantity = 0;
        }
        quantityField.setText(Integer.toString(quantity));
    }//GEN-LAST:event_downArrowKeyMousePressed

    private void upArrowKeyMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_upArrowKeyMousePressed
        int quantity = Integer.parseInt(quantityField.getText());
        quantity++;
        quantityField.setText(Integer.toString(quantity));
    }//GEN-LAST:event_upArrowKeyMousePressed

    private void printButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_printButtonActionPerformed

        prepareCashMemo();
        JOptionPane.showMessageDialog(null, "All items in the list are sold.");
        printRecord(memoPanel);
        clearTable(dtm2);
        setAllValues();
        showProducts();
//            saveViewInImgFormat(memoPanel,"myPNGFile");

    }//GEN-LAST:event_printButtonActionPerformed
    
    public void restoreStock(DefaultTableModel dtm,int row) {
        int stock = 0, quantity;
        String productId = (String) dtm.getValueAt(row, 1);
        try {
            String sql1 = "select stock from products where product_id=\'" + productId + "\' and user=\'" + user + "\'";
            pst = conn.prepareStatement(sql1);
            rs = pst.executeQuery();
            if (rs.next()) {
                stock = rs.getInt(1);
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Server down. Can't fetch stock data from server.", "Warning", JOptionPane.WARNING_MESSAGE);
        }

        quantity = (int) dtm.getValueAt(row, 6);
        stock += quantity;
        try {
            String sql2 = "update products set stock=" + stock + " where user='" + user + "\' and product_id=\'" + productId + "\'";
            pst = conn.prepareStatement(sql2);
            pst.execute();
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Server down. Can not update stock.", "Warning", JOptionPane.WARNING_MESSAGE);
        }
    }
    public void restoreStock(DefaultTableModel dtm,int row,boolean temp) {
        int stock = 0, quantity;
        String productId = (String) dtm.getValueAt(row, 1);
        try {
            String sql1 = "select stock from products where product_id=\'" + productId + "\' and user=\'" + user + "\'";
            pst = conn.prepareStatement(sql1);
            rs = pst.executeQuery();
            if (rs.next()) {
                stock = rs.getInt(1);
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Server down. Can't fetch stock data from server.", "Warning", JOptionPane.WARNING_MESSAGE);
        }

        quantity = (int) dtm.getValueAt(row, 6);
        stock -= quantity;
        try {
            String sql2 = "update products set stock=" + stock + " where user='" + user + "\' and product_id=\'" + productId + "\'";
            pst = conn.prepareStatement(sql2);
            pst.execute();
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Server down. Can not update stock.", "Warning", JOptionPane.WARNING_MESSAGE);
        }
    }
    private void memoRefreshButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_memoRefreshButtonMouseClicked

        for (int i = dtm2.getRowCount() - 1; i >= 0; i--) {
            restoreStock(dtm2,i);
        }

        clearTable(dtm2);
        setAllValues();
        showProducts();

    }//GEN-LAST:event_memoRefreshButtonMouseClicked

    private void memoRefreshButtonMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_memoRefreshButtonMousePressed
        memoRefreshButton.setVisible(false);
        memoRefreshButton1.setVisible(true);
    }//GEN-LAST:event_memoRefreshButtonMousePressed

    private void memoRefreshButtonMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_memoRefreshButtonMouseReleased
        memoRefreshButton.setVisible(true);
        memoRefreshButton1.setVisible(false);
    }//GEN-LAST:event_memoRefreshButtonMouseReleased

    private void memoRefreshButton1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_memoRefreshButton1MouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_memoRefreshButton1MouseClicked
    public void prepareCashMemo() {

        int quantity1 = 0, quantity = 0, bill_no;
        Double total, price;
        String id;

        Date date = new Date();
        java.sql.Date sqlDate = new java.sql.Date(date.getTime());
        bill_no = Integer.parseInt(billNoLabel.getText());

        for (int i = dtm2.getRowCount() - 1; i >= 0; i--) {
            id = (String) dtm2.getValueAt(i, 1);
            price = (double) dtm2.getValueAt(i, 4);
            quantity = (int) dtm2.getValueAt(i, 6);
            total = (double) dtm2.getValueAt(i, 8);

            try {
                String sql2 = "insert into sales(user,bill_no,product_id,price,quantity,total,date) values(?,?,?,?,?,?,?)";
                pst = conn.prepareStatement(sql2);
                pst.setString(1, user);
                pst.setInt(2, bill_no);
                pst.setString(3, id);
                pst.setDouble(4, price);
                pst.setInt(5, quantity);
                pst.setDouble(6, total);
                pst.setDate(7, sqlDate);
                pst.execute();
            } catch (SQLException ex) {
                System.out.println(ex);
            }
        }
    }
    private void saleItemButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saleItemButtonActionPerformed

        prepareCashMemo();
        clearTable(dtm2);
        setAllValues();
        JOptionPane.showMessageDialog(null, "All items in the list are sold.");
        showProducts();
    }//GEN-LAST:event_saleItemButtonActionPerformed
    public void clearTable(DefaultTableModel dtm) {
        for (int i = dtm.getRowCount() - 1; i >= 0; i--) {
            dtm.removeRow(i);
        }
    }
    private void maximizeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_maximizeButtonActionPerformed

        if (maximizeState) {
            this.setExtendedState(NORMAL);
            maximizeState = false;
        } else {
            this.setExtendedState(MAXIMIZED_BOTH);
            maximizeState = true;
        }
    }//GEN-LAST:event_maximizeButtonActionPerformed

    private void closeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeButtonActionPerformed
        int input = JOptionPane.showConfirmDialog(null, "Do you want to proceed?", "Quit", JOptionPane.YES_NO_CANCEL_OPTION);
        if (input == 0) {
            this.dispose();
        }
    }//GEN-LAST:event_closeButtonActionPerformed

    private void minimizeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_minimizeButtonActionPerformed

        this.setExtendedState(ICONIFIED);
    }//GEN-LAST:event_minimizeButtonActionPerformed
    public void printRecord(JPanel panel) {
        PrinterJob printerJob = PrinterJob.getPrinterJob();
        printerJob.setJobName("Print Record");
        printerJob.setPrintable(new Printable() {

            @Override
            public int print(Graphics graphics, PageFormat pageFormat, int pageIndex) throws PrinterException {
                //check if no printabel content
                if (pageIndex > 0) {
                    return Printable.NO_SUCH_PAGE;
                }
                Graphics2D graphics2D = (Graphics2D) graphics;
                graphics2D.translate(pageFormat.getImageableX() * 2, pageFormat.getImageableY() * 2);
                graphics2D.scale(0.84, 0.84);
                panel.print(graphics2D);
                return Printable.PAGE_EXISTS;
            }
        });
        boolean returningResult = printerJob.printDialog();
        if (returningResult) {

            try {
                printerJob.print();
            } catch (PrinterException printerException) {
                JOptionPane.showMessageDialog(this, "Print Erro: " + printerException.getMessage());
            }
        }
    }

    private void saveViewInImgFormat(JPanel view, String filename) {

        BufferedImage image = new BufferedImage(view.getPreferredSize().width,
                view.getPreferredSize().height,
                BufferedImage.TYPE_4BYTE_ABGR);

        view.print(image.getGraphics());

        try {
            File saveTo = new File(filename);
            if (saveTo.createNewFile()) {
                System.out.println("File created: " + saveTo.getName());
            } else {
                System.out.println("File already exists.");
            }

            ImageIO.write(image, "png", saveTo);
        } catch (IOException e) {
            System.out.println(e);
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(saleItemForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(saleItemForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(saleItemForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(saleItemForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new saleItemForm().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel addItemButton;
    private javax.swing.JLabel addItemButton1;
    private javax.swing.JLabel addressLabel;
    private javax.swing.JLabel billNoLabel;
    private javax.swing.JButton closeButton;
    private javax.swing.JLabel companyLabel;
    private javax.swing.JLabel dateLabel;
    private javax.swing.JLabel downArrowKey;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton maximizeButton;
    private javax.swing.JPanel memoPanel;
    private javax.swing.JLabel memoRefreshButton;
    private javax.swing.JLabel memoRefreshButton1;
    private javax.swing.JTable memoTable;
    private javax.swing.JButton minimizeButton;
    private javax.swing.JLabel phoneLabel;
    private javax.swing.JButton printButton;
    private javax.swing.JTextField productIdField;
    private javax.swing.JTextField productNameField;
    private javax.swing.JTable productTable;
    private javax.swing.JTextField quantityField;
    private javax.swing.JLabel quantityLabel;
    private javax.swing.JLabel refreshButton;
    private javax.swing.JLabel refreshButton1;
    private javax.swing.JLabel removeButton;
    private javax.swing.JLabel removeButton1;
    private javax.swing.JButton saleItemButton;
    private javax.swing.JLabel subTotalLabel;
    private javax.swing.JLabel upArrowKey;
    private javax.swing.JLabel updateButton;
    private javax.swing.JLabel updateButton1;
    private javax.swing.JTextField voucharCode;
    // End of variables declaration//GEN-END:variables
}
